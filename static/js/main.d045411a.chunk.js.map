{"version":3,"sources":["content/notes/notes.js","content/content.js","navbar/navbar.js","header/header.js","App.js","serviceWorker.js","index.js"],"names":["Note","props","handleChange","event","persist","setState","prevState","note","target","name","value","state","title","text","id","bind","handleBlur","deleteNote","this","updateNote","className","onBlur","defaultValue","onChange","onClick","React","Component","Content","addNote","notesData","Math","floor","random","console","log","prev","map","item","filter","localStorage","JSON","parse","stringify","notesList","key","activeContent","length","Navbar","onMenuClicked","e","handleNavOptions","href","Header","isNavbarHidden","toggleNavbar","App","menu","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kXA4DeA,G,wDAtDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAaRC,aAAe,SAAAC,GACbA,EAAMC,UACN,EAAKC,UAAS,SAAAC,GAAS,MAAK,CACxBC,KAAK,2BACAD,EAAUC,MADX,kBAEDJ,EAAMK,OAAOC,KAAON,EAAMK,OAAOE,aAjBxC,EAAKC,MAAQ,CACTJ,KAAO,CACPK,MAAO,EAAKX,MAAMW,MAClBC,KAAM,EAAKZ,MAAMY,KACjBC,GAAI,EAAKb,MAAMa,KAGnB,EAAKZ,aAAe,EAAKA,aAAaa,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAXD,E,yDA0BjBG,KAAKjB,MAAMkB,WAAWD,KAAKP,MAAMJ,Q,iCAGxBO,GACTI,KAAKjB,MAAMgB,WAAWC,KAAKP,MAAMJ,KAAKO,M,+BAG9B,IAAD,SAEmBI,KAAKP,MAAMJ,KAA9BK,EAFA,EAEAA,MAAOC,EAFP,EAEOA,KAAMC,EAFb,EAEaA,GACpB,OACE,kBAAC,WAAD,KACE,wBAAIM,UAAS,UAJG,QAImBC,OAAQH,KAAKF,YAC9C,8BAAUM,aAAcV,EAAOH,KAAK,QAAQc,SAAYL,KAAKhB,aAAckB,UAAS,UALtE,OAKsE,aACtF,8BACEE,aAAgBT,EAChBJ,KAAO,OACPW,UAAS,UATK,OASL,UACTG,SAAYL,KAAKhB,eAEnB,uBAAGkB,UAAS,UAZI,OAYJ,YAA8BI,QAAW,kBAAI,EAAKP,WAAWH,Y,GAhD9DW,IAAMC,YC6DVC,G,wDA5Db,aAAe,IAAD,8BACZ,gBASFC,QAAU,WACR,EAAKvB,SAAS,CAAEwB,UAAU,GAAD,mBAAM,EAAKlB,MAAMkB,WAAjB,CAA4B,CAACf,GAAIgB,KAAKC,MAAsB,IAAhBD,KAAKE,UAAoBnB,KAAM,YAAaD,MAAO,mBAX5G,EAcdO,WAAa,SAAAZ,GACX0B,QAAQC,IAAI3B,GACZ,EAAKF,UAAS,SAAA8B,GAAI,MAAK,CACnBN,UAAWM,EAAKN,UAAUO,KAAI,SAAAC,GAAI,OAAIA,EAAKvB,KAAOP,EAAKO,GAAK,CAAEA,GAAIP,EAAKO,GAAID,KAAMN,EAAKM,KAAMD,MAAOL,EAAKK,OAAUyB,UAjB1G,EAqBdpB,WAAa,SAAAH,GACXmB,QAAQC,IAAIpB,GACZ,EAAKT,SAAS,CAACwB,UAAW,EAAKlB,MAAMkB,UAAUS,QAAO,SAAS/B,GAC7D,OAAOA,EAAKO,KAAOA,QAtBrB,EAAKH,MAAQ,CACXkB,UAAWU,aAAaV,UAAWW,KAAKC,MAAMF,aAAaV,WAAa,IAE1E,EAAKD,QAAU,EAAKA,QAAQb,KAAb,gBACf,EAAKI,WAAa,EAAKA,WAAWJ,KAAhB,gBAClB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAPN,E,qDA4BJ,IAAD,OACPkB,QAAQC,IAAIhB,KAAKP,OAEjB4B,aAAaV,UAAYW,KAAKE,UAAUxB,KAAKP,MAAMkB,WACnD,IAAIc,EAAYzB,KAAKP,MAAMkB,UAAUO,KACjC,SAAC7B,GAAD,OACA,kBAAC,EAAD,CACEqC,IAAKrC,EAAKO,GACVA,GAAIP,EAAKO,GACTF,MAAOL,EAAKK,MACZC,KAAMN,EAAKM,KACXM,WAAY,EAAKA,WACjBF,WAAY,EAAKA,gBAEvB,OACE,yBAAKG,UAAS,UAbI,YAce,UAA7BF,KAAKjB,MAAM4C,eACX,kBAAC,WAAD,KACA,4BAAQzB,UAAS,UAhBH,UAgBG,YAA8BI,QAASN,KAAKU,SAA7D,aAE2B,UAA3BV,KAAKjB,MAAM4C,eAA2B3B,KAAKP,MAAMkB,UAAUiB,OAAO,GAClEH,EAC2B,UAA3BzB,KAAKjB,MAAM4C,eAAyD,IAA9B3B,KAAKP,MAAMkB,UAAUiB,QAC3D,kBAAC,WAAD,KACA,yBAAK1B,UAAS,UAtBA,UAsBA,eACd,uBAAGA,UAAS,UAvBE,UAuBF,cAAZ,mD,GAtDYK,IAAMC,YCuBbqB,G,8DAtBb,WAAY9C,GAAQ,IAAD,8BACjB,cAAMA,IACD+C,cAAgB,EAAKA,cAAcjC,KAAnB,gBAFJ,E,0DAKLkC,GACZ/B,KAAKjB,MAAMiD,iBAAiBD,EAAEzC,OAAOK,Q,+BAKrC,OACE,yBAAKO,UAAS,UAFI,YAGhB,uBAAGI,QAAWN,KAAK8B,eAAnB,SACA,uBAAGG,KAAK,KAAR,YACA,uBAAGA,KAAK,KAAR,WACA,uBAAGA,KAAK,KAAR,gB,GAlBa1B,IAAMC,YC+BZ0B,E,kDA3Bb,aAAe,IAAD,8BACZ,gBACKzC,MAAQ,CACX0C,gBAAgB,GAElB,EAAKC,aAAe,EAAKA,aAAavC,KAAlB,gBALR,E,2DASZG,KAAKb,UAAS,SAAAC,GACZ,MAAO,CACL+C,gBAAiB/C,EAAU+C,qB,+BAM/B,OACE,yBAAKjC,UAAS,UAFI,SAEJ,gBACZ,uBAAGA,UAAS,UAHI,SAGJ,kBAA4BF,KAAKP,MAAM0C,eAAX,UAHxB,SAGwB,oBAHxB,SAGwB,YAAgF7B,QAASN,KAAKoC,gBAEnIpC,KAAKP,MAAM0C,gBAAkB,kBAAC,EAAD,CAAQH,iBAAoBhC,KAAKjB,MAAMiD,wB,GAvB1DzB,IAAMC,WC4BZ6B,G,wDA1Bb,aAAe,IAAD,8BAEZ,gBAMFL,iBAAkB,SAACM,GACjB,EAAKnD,UAAS,WACZ,MAAO,CACLwC,cAAeW,OAPnB,EAAK7C,MAAQ,CACXkC,cAAe,SALL,E,qDAiBZ,OACA,yBAAKzB,UAAU,aACb,kBAAC,EAAD,CAAQ8B,iBAAoBhC,KAAKgC,iBAAkB9B,UAAU,WAC7D,kBAAC,EAAD,CAASyB,cAAiB3B,KAAKP,MAAMkC,cAAezB,UAAU,iB,GAtBlDK,IAAMC,YCOJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.d045411a.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport './note.scss'\n\n\nclass Note extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        note : {\n        title: this.props.title,\n        text: this.props.text,\n        id: this.props.id\n        }\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.deleteNote = this.deleteNote.bind(this);\n}\n\n  handleChange = event => {\n    event.persist();\n    this.setState(prevState => ({\n        note: {\n          ...prevState.note,\n          [event.target.name]: event.target.value\n        }\n      }));\n\n  }\n\n  handleBlur() {\n    this.props.updateNote(this.state.note);\n  }\n\n  deleteNote(id) {\n    this.props.deleteNote(this.state.note.id);\n  }\n\n  render() {\n    var componentName = \"note\";\n    const {title, text, id} = this.state.note;\n    return(\n      <Fragment>\n        <li className={`${componentName}`} onBlur={this.handleBlur}>\n          <textarea defaultValue={title} name=\"title\" onChange = {this.handleChange} className = {`${componentName}__title`}></textarea>\n        <textarea\n          defaultValue = {text}\n          name = \"text\"\n          className = {`${componentName}__text`}\n          onChange = {this.handleChange}>\n        </textarea>\n        <i className={`${componentName}__delete`} onClick = {()=>this.deleteNote(id)}></i>\n        </li>\n\n      </Fragment>\n    )\n  }\n}\n\nexport default Note;","import React, { Fragment } from 'react';\nimport Note from './notes/notes'\nimport './content.scss'\n\nclass Content extends React.Component{\n  constructor() {\n    super();\n    this.state = {\n      notesData: localStorage.notesData ?JSON.parse(localStorage.notesData) : []\n    }\n    this.addNote = this.addNote.bind(this);\n    this.updateNote = this.updateNote.bind(this);\n    this.deleteNote = this.deleteNote.bind(this);\n  }\n\n  addNote = () => {\n    this.setState({ notesData: [...this.state.notesData, {id: Math.floor(Math.random() * 10000) , text: 'Demo Text', title: 'Demo Title'}] });\n  }\n\n  updateNote = note => {\n    console.log(note);\n    this.setState(prev => ({\n        notesData: prev.notesData.map(item => item.id === note.id ? { id: note.id, text: note.text, title: note.title } : item)\n    }))\n  }\n\n  deleteNote = id => {\n    console.log(id);\n    this.setState({notesData: this.state.notesData.filter(function(note) {\n      return note.id !== id\n  })});\n  }\n\n  render() {\n    console.log(this.state);\n    let componentName = \"content\";\n    localStorage.notesData = JSON.stringify(this.state.notesData);\n    var notesList = this.state.notesData.map(\n        (note)=>\n        <Note\n          key={note.id}\n          id={note.id}\n          title={note.title}\n          text={note.text}\n          updateNote={this.updateNote}\n          deleteNote={this.deleteNote}\n        />);\n    return(\n      <div className={`${componentName}`}>\n        { this.props.activeContent === 'Notes' &&\n          <Fragment>\n          <button className={`${componentName}__button`} onClick={this.addNote}>Add Note</button>\n          </Fragment> }\n        { this.props.activeContent==='Notes' && this.state.notesData.length>0 &&\n          notesList}\n        { this.props.activeContent==='Notes' && this.state.notesData.length===0 &&\n          <Fragment>\n          <div className={`${componentName}__no-data`}></div>\n          <p className={`${componentName}__message`}>No Notes found. Click Add Note to add one</p>\n          </Fragment> }\n      </div>\n    )\n  }\n}\n\nexport default Content;","import React from 'react';\nimport './navbar.scss'\n\nclass Navbar extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.onMenuClicked = this.onMenuClicked.bind(this);\n  }\n\n  onMenuClicked(e) {\n    this.props.handleNavOptions(e.target.text);\n  }\n\n  render() {\n    var componentName = \"sidenav\";\n    return(\n      <div className= {`${componentName}`}>\n        <a onClick = {this.onMenuClicked}>Notes</a>\n        <a href=\"#\">Services</a>\n        <a href=\"#\">Clients</a>\n        <a href=\"#\">Contact</a>\n      </div>\n    )\n  }\n}\n\nexport default Navbar;","import React from 'react';\nimport './header.scss'\nimport Navbar from '../navbar/navbar';\n\n\nclass Header extends React.Component{\n\n  constructor() {\n    super();\n    this.state = {\n      isNavbarHidden: true\n    }\n    this.toggleNavbar = this.toggleNavbar.bind(this);\n  }\n\n  toggleNavbar() {\n    this.setState(prevState => {\n      return {\n        isNavbarHidden: !prevState.isNavbarHidden\n      }\n    })\n  }\n  render() {\n    var componentName = \"header\";\n    return(\n      <div className={`${componentName}__container`}>\n        <i className={`${componentName}__icon ${this.state.isNavbarHidden?`${componentName}__menu`:`${componentName}__close`}`} onClick={this.toggleNavbar}></i>\n\n        { !this.state.isNavbarHidden && <Navbar handleNavOptions = {this.props.handleNavOptions} /> }\n      </div>\n    )\n  }\n}\n\nexport default Header;","import React from 'react';\nimport Content from './content/content';\nimport Header from './header/header'\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor() {\n\n    super();\n\n    this.state = {\n      activeContent: 'Notes'\n    }\n  }\n  handleNavOptions= (menu) => {\n    this.setState(()=>{\n      return {\n        activeContent: menu\n      }\n    })\n}\n\n  render () {\n    return (\n    <div className=\"container\">\n      <Header handleNavOptions = {this.handleNavOptions} className=\"header\"/>\n      <Content activeContent = {this.state.activeContent} className=\"content\"/>\n    </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}